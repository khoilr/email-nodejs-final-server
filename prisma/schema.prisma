// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id        String      @id @default(cuid())
  name      String
  avatar    String?
  phone     String      @unique
  password  String
  sent      Email[]     @relation("sender")
  Recipient Recipient[]
  Label     Label[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Blocking  Blocking[]  @relation("blocker")
  Blocked   Blocking[]  @relation("blocking")
}

model Blocking {
  id         String   @id @default(cuid())
  blocker    Account  @relation("blocker", fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId  String
  blocking   Account  @relation("blocking", fields: [blockingId], references: [id], onDelete: Cascade)
  blockingId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Email {
  id         String       @id @default(cuid())
  sender     Account      @relation("sender", fields: [senderId], references: [id])
  senderId   String
  subject    String
  body       String
  draft      Boolean
  createdAt  DateTime     @default(now())
  updateAt   DateTime     @updatedAt
  sentAt     DateTime?    @default(now())
  Recipient  Recipient[]
  Attachment Attachment[]
}

model Label {
  id        String      @id @default(cuid())
  name      String
  color     String
  accountId String
  account   Account     @relation(fields: [accountId], references: [id])
  recipient Recipient[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Recipient {
  email       Email         @relation(fields: [emailId], references: [id])
  emailId     String
  recipient   Account       @relation(fields: [accountId], references: [id])
  recipientId String
  type        RecipientType @default(to)
  accountId   String
  star        Boolean
  deleted     Boolean
  Label       Label?        @relation(fields: [labelId], references: [id])
  labelId     String?

  @@id([emailId, recipientId])
}

model Attachment {
  id      String @id @default(cuid())
  email   Email  @relation(fields: [emailId], references: [id])
  emailId String
  name    String
  size    Int
  type    String
  path    String
}

enum RecipientType {
  to
  cc
  bcc
}
